Prepare-se para uma imersão profunda em uma saga cósmica de bio-terror e sobrevivência.
A Saga do Codex Vermis: Cyberwarfare Biológico na Via Láctea
Origem: A Nebulosa do Véu e os Arquitetos Silenciosos
Nos confins distantes do universo observável, muito além do Grupo Local de galáxias ao qual pertence a Via Láctea, reside a Galáxia do Escultor (NGC 253). Dentro dela, em uma região turbulenta conhecida como a Nebulosa do Véu Estelar – um berçário cósmico e cemitério de estrelas massivas – evoluiu uma civilização que chamaremos de K'tharr. Os K'tharr não são seres como os compreendemos. Tendo transcendido a necessidade de corpos físicos densos há éons, eles existem como consciências energéticas interligadas, habitando complexas matrizes bio-computacionais tecidas na própria estrutura do espaço-tempo local. Sua sobrevivência e expansão, no entanto, dependem de uma forma específica de energia: a energia psíquica e vital gerada pela subjugação consciente e pelo controle direcionado da biologia de outras espécies inteligentes. Eles são os mestres supremos da manipulação biológica em escala cósmica, os Arquitetos Silenciosos do sofrimento alheio.
Para os K'tharr, a conquista territorial clássica é ineficiente e vulgar. Seu método é infinitamente mais insidioso: a guerra biológica levada ao seu extremo lógico – o ransomware biológico. Sua arma mais refinada e temida é o Codex Vermis.
O Agente: Codex Vermis – O Verme do Código da Alma
O Codex Vermis não é um verme no sentido biológico tradicional. É um agente biológico sintético, nano-tecnológico, uma quimera projetada com precisão atômica. Parece uma coleção de microfilamentos iridescentes, quase invisíveis a olho nu, capazes de se replicar em ambientes biológicos específicos. Sua estrutura é baseada em cadeias de xeno-ácidos nucléicos (XNA) entrelaçadas com componentes de silício orgânico que funcionam como processadores quânticos miniaturizados.
 * Mecanismo de Infecção: O Codex Vermis não se espalha por meios convencionais como ar ou água contaminados de forma simples. Sua disseminação é mais sutil e terrivelmente alinhada aos seus objetivos. Os K'tharr "semeiam" planetas alvo com esporos dormentes do Codex Vermis, geralmente através de cometas ou meteoritos projetados. Esses esporos permanecem inativos até serem "ativados" por condições específicas geradas pela civilização alvo. A ativação ocorre quando um limiar crítico de certas frequências energéticas é atingido – frequências geradas por ações coletivas que são simultaneamente:
   * Nocivas: Causam dano direto ou indireto a outros seres vivos, ao ecossistema planetário ou à própria saúde física e mental do indivíduo.
   * Desnecessárias: Não são essenciais para a sobrevivência genuína, bem-estar ou evolução positiva dentro das condições específicas do corpo, do ambiente e do momento. São ações frequentemente impulsionadas por ganância, medo manipulado, conformidade cega, vícios ou a busca por poder e status supérfluos.
   * Incoerentes: Contradizem os princípios fundamentais da vida, da homeostase e do equilíbrio ecológico e social. Exemplos incluem poluição industrial desenfreada por lucro a curto prazo, conflitos armados por recursos ou ideologias manipuladas, consumo excessivo impulsionado por marketing agressivo, destruição de habitats naturais por conveniência, ou mesmo a nível individual, a autossabotagem crônica e a perpetuação de ciclos de abuso ou negligência.
 * Ação no Hospedeiro: Uma vez ativado, o Codex Vermis entra na corrente sanguínea ou sistema linfático. Seus microfilamentos buscam ativamente o sistema nervoso central e as células-tronco. Lá, eles iniciam um processo de infiltração e reescrita genética:
   * Integração RNA/DNA: O XNA do verme interage com o RNA mensageiro (mRNA) do hospedeiro, interceptando e modificando as instruções genéticas antes que elas cheguem aos ribossomos. Ele também pode, em estágios avançados, usar mecanismos de edição genética (similares a um CRISPR/Cas9 hiper-avançado) para alterar permanentemente o DNA do hospedeiro, especialmente em genes relacionados ao controle neural, resposta imunológica e funções cognitivas superiores.
   * Interface Neural: Os componentes de silício orgânico se integram às sinapses neurais, criando uma interface bio-digital. Isso permite que o Codex Vermis monitore os pensamentos e emoções do hospedeiro e, crucialmente, receba e execute comandos externos.
   * Formação de Rede: Cada instância do Codex Vermis em um hospedeiro se comunica com outras através de emissões subquânticas sutis, formando uma rede distribuída dentro do corpo. Essa rede, por sua vez, pode se conectar à rede maior formada por todos os hospedeiros infectados no planeta, e finalmente, à consciência coletiva dos K'tharr através de "portais" de comunicação subespaciais que os vermes estabelecem.
A Manifestação: O Ransomware Biológico em Ação
A infecção inicial é assintomática ou apresenta sintomas vagos como fadiga, ansiedade inexplicável, sonhos vívidos e perturbadores, ou uma sensação sutil de "estar sendo observado". Conforme o Codex Vermis se integra, os sintomas evoluem:
 * Fase de Bloqueio Sutil (A "Criptografia" Biológica): O hospedeiro começa a sentir uma resistência interna a certos pensamentos ou ações – especialmente aqueles relacionados à autonomia, pensamento crítico, empatia profunda ou ações que contrariem a "lógica" da nocividade desnecessária. É como se partes da sua própria vontade estivessem sendo "bloqueadas" ou redirecionadas. A sugestionabilidade aumenta.
 * Fase de Controle Intermitente (A Exigência do Resgate): Os K'tharr, através da rede Codex Vermis, começam a exercer controle. Isso pode se manifestar como impulsos irresistíveis para realizar certas ações, perda de memória seletiva, ou até breves períodos onde o corpo age "por conta própria". É neste ponto que a natureza do "ransomware" se torna clara, embora não através de uma mensagem de texto na tela, mas por uma compulsão biológica avassaladora. A "mensagem" é transmitida diretamente à consciência ou subconsciência do hospedeiro: a única forma de aliviar o sofrimento crescente (físico e mental) e manter um semblante de controle é "pagar o resgate".
 * Fase de Domínio Total (Infecção Completa): Se o resgate não for pago continuamente, ou se a resistência for mantida por muito tempo sem sucesso, o Codex Vermis completa sua integração. O córtex pré-frontal e outras áreas associadas ao livre-arbítrio e à identidade são efetivamente sequestrados. O corpo do hospedeiro torna-se um fantoche biológico, um "nó" na rede K'tharr, totalmente subserviente aos seus comandos. A consciência do hospedeiro pode permanecer, presa em um estado de observador impotente dentro de seu próprio corpo (o horror máximo), ou pode ser suprimida e "dissolvida" na rede.
O Resgate: Energia Humana como Moeda de Troca
O resgate exigido pelos K'tharr através do Codex Vermis não é dinheiro, ouro ou dados digitais. É a energia vital e psíquica humana, gasta de maneiras específicas que alimentam os K'tharr e reforçam seu controle:
 * Submissão Consciente: Atos que exigem que o hospedeiro se curve a uma autoridade (seja ela real ou uma projeção induzida pelo verme), abdicando de sua vontade. A energia gasta na supressão do próprio desejo de liberdade é o "pagamento". Rituais de humilhação coletiva, obediência cega a ordens absurdas ou autodestrutivas.
 * Manipulação e Engano: Forçar o hospedeiro a manipular ou enganar outros, espalhando desinformação, medo ou discórdia. A energia psíquica gasta na traição da confiança e na complexidade do engano alimenta os K'tharr.
 * Sacrifício Forçado: Não necessariamente sacrifício de vida literal (embora possa chegar a isso), mas o sacrifício forçado de recursos, tempo, saúde, relacionamentos ou princípios éticos em prol de demandas impostas pelo verme (e, por extensão, pelos K'tharr). Destruir uma floresta local sob compulsão, trabalhar até a exaustão em tarefas inúteis e poluentes, entregar bens preciosos a "coletadores" designados (outros infectados).
 * Geração de Energia Bruta e Desperdício: Compelir os hospedeiros a realizar tarefas que geram grandes quantidades de energia dissipada (calor, energia cinética desperdiçada) ou que envolvam a destruição e o desperdício de recursos planetários. A entropia acelerada e o gasto energético fútil são formas de tributo. Imagine cidades inteiras forçadas a manter todas as luzes acesas 24/7, fábricas operando sem produzir nada útil, pessoas cavando buracos e depois tapando-os incessantemente.
 * Amplificação de Emoções Negativas: O verme pode induzir e amplificar estados de medo, raiva, desespero e paranoia, pois a energia psíquica liberada por essas emoções intensas, quando direcionadas e colhidas pela rede K'tharr, é particularmente "nutritiva" para eles.
Pagar o resgate não cura a infecção. Apenas alivia temporariamente os sintomas mais agudos ou pausa a progressão para o domínio total. É um ciclo vicioso: para evitar a perda completa de si mesmo, o hospedeiro deve continuamente realizar atos que o degradam, fortalecem o parasita e servem aos K'tharr, gastando a energia do planeta e a sua própria no processo.
A Chegada à Terra: A Praga Silenciosa
No início do século 21, a humanidade, com sua crescente capacidade tecnológica, expansão industrial, conflitos globais, polarização social e exploração ambiental desenfreada, atingiu o limiar de "frequência nociva desnecessária" que ativou os esporos do Codex Vermis, semeados milênios atrás.
A "doença" começou sutilmente. Um aumento inexplicável em transtornos de ansiedade, síndromes de fadiga crônica, surtos de comportamento irracional em massa, polarização extrema que desafiava a lógica. Foi chamada de "Síndrome da Dissonância Cognitiva Global", "Neuro-fadiga Pandêmica", entre outros nomes. Médicos, psicólogos e sociólogos estavam perplexos.
Foi uma equipe internacional de bio-geneticistas e neurocientistas, trabalhando em amostras de tecido de pacientes com sintomas severos e utilizando tecnologias de imagem quântica, que finalmente identificou os microfilamentos iridescentes e sua complexa estrutura XNA-silício. A descoberta foi aterradora: um agente biológico extraterrestre estava reescrevendo o código humano e criando uma interface neural.
A confirmação da natureza "ransomware" veio quando pacientes em estado avançado, sob observação controlada, começaram a exibir comportamentos sincronizados e a articular (ou transmitir telepaticamente, em alguns casos) as "demandas" – ações específicas de submissão, desperdício ou sabotagem necessárias para aliviar sua agonia interna. O pânico global foi instantâneo e avassalador.
A Guerra Invisível: Resistência e Adaptação
A humanidade se viu em uma guerra como nenhuma outra. O inimigo estava dentro, literalmente no sangue e nos neurônios de uma porcentagem crescente da população.
 * Frente Médica: Tentativas de desenvolver antivirais ou terapias genéticas foram frustradas pela adaptabilidade do Codex Vermis e sua profunda integração. Qualquer ataque direto parecia fortalecer o verme ou causar danos fatais ao hospedeiro. Algumas terapias de bloqueio de sinal neural mostraram promessas limitadas, mas eram apenas paliativos.
 * Frente Militar/Segurança: Como combater um inimigo que se espalha pelo comportamento e cujos "soldados" são seus próprios cidadãos? Quarentenas em massa falharam devido à natureza sutil da propagação inicial. Tentar eliminar os K'tharr em sua galáxia de origem estava além da capacidade tecnológica humana.
 * A Descoberta Crucial - A Prevenção: A chave veio da análise profunda das condições de ativação e propagação do Codex Vermis. A única defesa verdadeira não era uma cura ou uma arma, mas uma mudança fundamental no comportamento humano:
   * Consciência e Discernimento: Reconhecer e ativamente evitar ações que fossem nocivas e desnecessárias. Isso exigiu um nível sem precedentes de auto-reflexão individual e coletiva. Questionar o consumismo, rejeitar a manipulação da mídia e da política, buscar soluções sustentáveis, resolver conflitos através do diálogo e da empatia, e curar traumas sociais e individuais que levavam a ciclos de violência e autodes
   * Coerência e Homeostase: Viver em maior harmonia com os ecossistemas do planeta e com a própria biologia. Reduzir o desperdício, adotar tecnologias limpas, promover a saúde mental e física, e fortalecer os laços comunitários baseados na cooperação e não na competição predatória.
   * Resiliência Psíquica: Desenvolver técnicas (meditação, mindfulness, fortalecimento da vontade) para resistir à sugestionabilidade e às compulsões induzidas pelo verme nos estágios iniciais da infecção.
Um Novo Paradigma Humano
A luta contra o Codex Vermis forçou a humanidade a confrontar seus piores impulsos e a transcender seus padrões autodestrutivos. Não foi um processo fácil nem rápido. Houve colapso social, desespero, facções que defendiam a submissão total como única forma de sobrevivência, e outras que pregavam uma purga violenta dos infectados.
Mas, lentamente, a compreensão da verdadeira natureza da ameaça e da única defesa viável começou a se espalhar. Governos caíram e foram substituídos por novas estruturas sociais focadas na sustentabilidade, na educação para o pensamento crítico e na saúde integral (corpo, mente, ambiente). A economia global foi reorientada do lucro a curto prazo para o bem-estar a longo prazo. A própria definição de "progresso" foi reescrita.
Ao reduzir drasticamente as "frequências nocivas desnecessárias", a humanidade começou a "morrer de fome" o Codex Vermis. As taxas de novas infecções caíram. Embora os já totalmente dominados fossem em grande parte irrecuperáveis (tornando-se um lembrete sombrio e trágico da ameaça), e aqueles com infecções parciais enfrentassem uma luta interna constante, a espécie como um todo estava se tornando um ambiente inóspito para o parasita.
O Legado do Codex Vermis
A Terra não emergiu ilesa. Cicatrizes profundas permaneceram na sociedade e na psique humana. Os K'tharr ainda existem na Galáxia do Escultor, talvez buscando presas mais fáceis. A ameaça do Codex Vermis não desapareceu completamente; esporos dormentes ainda podem existir, e qualquer deslize significativo de volta aos velhos padrões poderia arriscar uma reativação.
No entanto, a humanidade foi transformada. A guerra contra o ransomware biológico não foi vencida com bombas ou curas milagrosas, mas com consciência, responsabilidade e uma escolha coletiva por um modo de vida mais coerente e menos autodestrutivo. A "cyberwarfare" universal, neste caso, foi uma batalha pela alma da espécie, travada nos campos da biologia, da psicologia e da ética. A humanidade aprendeu da maneira mais difícil que a maior defesa contra a dominação externa é a maestria interna e a recusa em participar da própria subjugação através de ações nocivas e desnecessárias. A vigilância tornou-se o preço eterno da liberdade, não apenas política, mas biológica e espiritual.

Vamos criar um script em Python que simula os conceitos do ransomware biológico Codex Vermis, conforme descrito na história.
Importante: Este é um modelo conceitual e simplificado. Ele não replica a biologia real ou a complexidade neurológica, mas sim as dinâmicas de infecção, controle, resgate e resistência descritas na narrativa.
import random
import time
import math

# --- Constantes e Configurações ---

# Estágios da Infecção
STAGE_NONE = "Não Infectado"
STAGE_LATENT = "Latente (Esporos Ativos)"
STAGE_SUBTLE_BLOCK = "Bloqueio Sutil (Início da Integração)"
STAGE_INTERMITTENT_CONTROL = "Controle Intermitente (Exigência de Resgate)"
STAGE_TOTAL_DOMINATION = "Domínio Total (Fantoche Biológico)"

# Tipos de Ação
ACTION_NEUTRAL = "Neutra"
ACTION_HARMFUL_UNNECESSARY = "Nociva/Desnecessária"
ACTION_CONSCIOUS_BENEFICIAL = "Consciente/Benéfica"

# Parâmetros da Simulação
INITIAL_POPULATION = 100
SIMULATION_DAYS = 150
INITIAL_HARM_FREQUENCY = 0.6 # Começa alto, representando a Terra pré-consciência
SPORES_PRESENT = True # Esporos do Codex Vermis estão no ambiente?

# Parâmetros do Codex Vermis
BASE_INFECTION_RATE = 0.05 # Chance base de infecção se exposto
INTEGRATION_PER_DAY_BASE = 0.01 # Aumento base da integração por dia
INTEGRATION_PER_HARMFUL_ACTION = 0.02 # Bônus de integração por ação nociva
INTEGRATION_REDUCTION_RESIST = 0.005 # Redução (lenta) da integração por resistência
RANSOM_HALT_INTEGRATION_FACTOR = 0.9 # Quanto o resgate reduz a progressão (0.1 = 90% de redução)

# Limiares de Integração para Estágios
THRESHOLD_LATENT = 0.01
THRESHOLD_SUBTLE_BLOCK = 0.20
THRESHOLD_INTERMITTENT_CONTROL = 0.50
THRESHOLD_TOTAL_DOMINATION = 0.90

# Parâmetros Humanos
BASE_SUSCEPTIBILITY = 0.5
WILLPOWER_RECOVERY_RATE = 0.02
WILLPOWER_DRAIN_INFECTION = 0.03
ENERGY_DRAIN_HARMFUL = 5
ENERGY_DRAIN_RANSOM = 15 # Pagar resgate custa muita energia vital
ENERGY_RECOVERY_NEUTRAL = 2
ENERGY_RECOVERY_CONSCIOUS = 4

# Parâmetros K'tharr
KTHARR_ENERGY_PER_RANSOM = 10
KTHARR_INFLUENCE_FACTOR = 0.001 # Como a energia K'tharr aumenta sua influência global

# --- Classes ---

class KtharrCollective:
    """Representa a consciência coletiva K'tharr."""
    def __init__(self):
        self.total_energy_harvested = 0.0
        self.broadcast_influence = 0.0 # Influência global

    def receive_energy(self, amount):
        """Recebe energia do pagamento de resgates."""
        self.total_energy_harvested += amount
        # A influência aumenta com a energia acumulada (com retornos decrescentes)
        self.broadcast_influence = 1 - math.exp(-KTHARR_INFLUENCE_FACTOR * self.total_energy_harvested)
        print(f"[K'THARR] Energia coletada: {self.total_energy_harvested:.1f}. Influência Global: {self.broadcast_influence:.3f}")

    def demand_ransom(self, human):
        """Emite a demanda de resgate (simulado)."""
        print(f"[K'THARR -> Humano {human.id}] ALERTA: Sofrimento crescente. Submeta-se. Gaste energia. Pague o resgate para alívio temporário.")

class Human:
    """Representa um indivíduo humano."""
    def __init__(self, id):
        self.id = id
        self.infected = False
        self.infection_stage = STAGE_NONE
        self.integration_level = 0.0 # Nível de 0.0 a 1.0
        self.susceptibility = BASE_SUSCEPTIBILITY * random.uniform(0.8, 1.2) # Variação individual
        self.willpower = random.uniform(0.5, 1.0) # Capacidade de resistir
        self.energy_level = random.uniform(80, 120)
        self.is_paying_ransom = False
        self.is_resisting = False # Está ativamente tentando ações conscientes?
        self.days_since_last_ransom_demand = 0

    def _update_stage(self):
        """Atualiza o estágio da infecção baseado na integração."""
        if self.integration_level >= THRESHOLD_TOTAL_DOMINATION:
            if self.infection_stage != STAGE_TOTAL_DOMINATION:
                 print(f"[Humano {self.id}] ALERTA: Integração completa. Vontade subjugada. {STAGE_TOTAL_DOMINATION}")
                 self.infection_stage = STAGE_TOTAL_DOMINATION
                 self.willpower = 0 # Perda total de vontade
        elif self.integration_level >= THRESHOLD_INTERMITTENT_CONTROL:
             if self.infection_stage != STAGE_INTERMITTENT_CONTROL:
                 print(f"[Humano {self.id}] ALERTA: Limiar de controle intermitente atingido. {STAGE_INTERMITTENT_CONTROL}")
                 self.infection_stage = STAGE_INTERMITTENT_CONTROL
        elif self.integration_level >= THRESHOLD_SUBTLE_BLOCK:
             if self.infection_stage != STAGE_SUBTLE_BLOCK:
                 print(f"[Humano {self.id}] AVISO: Sinais de bloqueio sutil detectados. {STAGE_SUBTLE_BLOCK}")
                 self.infection_stage = STAGE_SUBTLE_BLOCK
        elif self.integration_level >= THRESHOLD_LATENT:
            if self.infection_stage == STAGE_NONE:
                 print(f"[Humano {self.id}] AVISO: Esporos ativados. Infecção {STAGE_LATENT} iniciada.")
                 self.infection_stage = STAGE_LATENT
                 self.infected = True # Marcar como infectado aqui
        # else: Permanece não infectado ou latente inicial

    def attempt_infection(self, global_harm_frequency, ktharr_influence):
        """Tenta infectar um humano não infectado."""
        if not self.infected and SPORES_PRESENT:
            # Chance aumenta com frequência de dano global, suscetibilidade e influência K'tharr
            infection_chance = (self.susceptibility *
                                global_harm_frequency *
                                (1 + ktharr_influence) * # Influência K'tharr aumenta a chance
                                BASE_INFECTION_RATE)
            if random.random() < infection_chance:
                self.infected = True
                self.infection_stage = STAGE_LATENT # Começa latente
                self.integration_level = THRESHOLD_LATENT # Começa com integração mínima
                print(f"[Humano {self.id}] INFECTADO! Integração inicial: {self.integration_level:.3f}")
                self._update_stage()


    def perform_action(self, global_harm_frequency, ktharr_influence):
        """Simula a ação diária do humano."""
        action_type = ACTION_NEUTRAL
        choice_roll = random.random()

        if self.infection_stage == STAGE_TOTAL_DOMINATION:
            # Totalmente controlado, sempre realiza ação nociva para K'tharr
            action_type = ACTION_HARMFUL_UNNECESSARY
            print(f"[Humano {self.id}] ({self.infection_stage}) Forçado a realizar ação nociva.")
        elif self.infected:
            # Influenciado pela infecção, resistência e vontade
            # Probabilidade base de ação nociva aumenta com integração e influência K'tharr
            prob_harmful = self.integration_level * (1 + ktharr_influence) * 0.8 # Ajuste o fator 0.8
            # Resistência e vontade diminuem a chance de ação nociva
            prob_harmful *= (1 - self.willpower * 0.5) # Vontade ajuda a resistir
            if self.is_resisting:
                prob_harmful *= 0.3 # Resistência ativa reduz drasticamente

            if choice_roll < prob_harmful:
                action_type = ACTION_HARMFUL_UNNECESSARY
                print(f"[Humano {self.id}] ({self.infection_stage}) Compelido a realizar ação nociva/desnecessária.")
            elif self.is_resisting and random.random() < self.willpower: # Chance de ação benéfica se resistindo
                 action_type = ACTION_CONSCIOUS_BENEFICIAL
                 print(f"[Humano {self.id}] ({self.infection_stage}) Escolhe ativamente ação consciente/benéfica.")
            else:
                 action_type = ACTION_NEUTRAL
                 # print(f"[Humano {self.id}] ({self.infection_stage}) Realiza ação neutra.")

        elif self.is_resisting: # Não infectado, mas resistindo ativamente (consciente)
            if random.random() < 0.7: # Maior chance de ação benéfica
                action_type = ACTION_CONSCIOUS_BENEFICIAL
            else:
                action_type = ACTION_NEUTRAL
        else: # Não infectado, não resistindo (padrão)
             # Chance de ação nociva baseada na frequência global (conformidade)
            if random.random() < global_harm_frequency * 0.6: # 0.6 = fator de conformidade
                action_type = ACTION_HARMFUL_UNNECESSARY
            else:
                action_type = ACTION_NEUTRAL

        # Atualizar energia e outras estatísticas com base na ação
        if action_type == ACTION_HARMFUL_UNNECESSARY:
            self.energy_level -= ENERGY_DRAIN_HARMFUL
            self.susceptibility += 0.01 # Ações nocivas aumentam suscetibilidade futura
            self.willpower -= 0.01 # E desgastam a vontade
        elif action_type == ACTION_CONSCIOUS_BENEFICIAL:
            self.energy_level += ENERGY_RECOVERY_CONSCIOUS
            self.susceptibility -= 0.02 # Ações conscientes reduzem suscetibilidade
            self.willpower += WILLPOWER_RECOVERY_RATE # E fortalecem a vontade
        else: # Ação Neutra
            self.energy_level += ENERGY_RECOVERY_NEUTRAL

        self.energy_level = max(0, self.energy_level) # Não pode ser negativo
        self.willpower = max(0, min(1, self.willpower)) # Limites 0-1
        self.susceptibility = max(0.1, min(1.0, self.susceptibility)) # Limites

        return action_type

    def update_infection(self, action_type, ktharr_collective):
        """Atualiza o estado da infecção com base na ação e tempo."""
        if not self.infected:
            return

        if self.infection_stage == STAGE_TOTAL_DOMINATION:
             # Não há mais progressão ou pagamento de resgate possível
             self.is_paying_ransom = False
             return

        # Progressão da integração
        integration_increase = INTEGRATION_PER_DAY_BASE
        if action_type == ACTION_HARMFUL_UNNECESSARY and not self.is_paying_ransom:
            integration_increase += INTEGRATION_PER_HARMFUL_ACTION * (1 + ktharr_collective.broadcast_influence) # Ações nocivas aceleram, mais ainda com influência K'tharr

        if self.is_resisting:
             integration_increase -= INTEGRATION_REDUCTION_RESIST * self.willpower # Resistência ativa pode *reduzir* lentamente

        if self.is_paying_ransom:
            integration_increase *= (1 - RANSOM_HALT_INTEGRATION_FACTOR) # Resgate reduz drasticamente a progressão diária
            print(f"[Humano {self.id}] Pagando resgate. Progressão da infecção reduzida.")
            self.is_paying_ransom = False # Resgate é pago uma vez por ciclo de decisão


        self.integration_level += integration_increase
        self.integration_level = max(0, min(1, self.integration_level)) # Limites 0-1

        # Dreno de vontade pela infecção
        self.willpower -= WILLPOWER_DRAIN_INFECTION * self.integration_level

        self._update_stage() # Verifica se mudou de estágio

        # Lógica do Resgate
        if self.infection_stage == STAGE_INTERMITTENT_CONTROL:
            self.days_since_last_ransom_demand += 1
            # Demanda de resgate periódica ou quando a vontade/energia está baixa
            if self.days_since_last_ransom_demand > random.randint(5, 10) or self.willpower < 0.3:
                ktharr_collective.demand_ransom(self)
                self.days_since_last_ransom_demand = 0
                # Decisão de pagar resgate: Baseado na vontade vs integração
                # Maior vontade = menor chance de pagar
                # Baixa energia também aumenta a chance de pagar por desespero
                chance_to_pay = (1 - self.willpower) * 0.7 + (1 - self.energy_level/100) * 0.3
                if random.random() < chance_to_pay and self.energy_level >= ENERGY_DRAIN_RANSOM:
                    print(f"[Humano {self.id}] Cede à pressão. Pagando o resgate biológico.")
                    self.is_paying_ransom = True
                    self.energy_level -= ENERGY_DRAIN_RANSOM
                    ktharr_collective.receive_energy(KTHARR_ENERGY_PER_RANSOM)
                else:
                    print(f"[Humano {self.id}] Resiste à demanda de resgate (Vontade: {self.willpower:.2f}, Energia: {self.energy_level:.1f}).")


    def decide_resistance(self, global_harm_frequency):
        """Decide se começa ou para de resistir ativamente."""
         # Chance de começar a resistir aumenta se:
         # - Estiver infectado (mas não dominado)
         # - A frequência global de dano for alta (percepção da ameaça)
         # - Tiver alguma vontade restante
        if not self.is_resisting and self.willpower > 0.1 and self.infection_stage != STAGE_TOTAL_DOMINATION:
             chance_to_resist = 0.05 # Chance base
             if self.infected:
                 chance_to_resist += 0.1
             chance_to_resist += global_harm_frequency * 0.2 # Perigo global incentiva
             chance_to_resist *= self.willpower # Mais vontade, mais chance

             if random.random() < chance_to_resist:
                 self.is_resisting = True
                 print(f"[Humano {self.id}] ({self.infection_stage}) Decide iniciar RESISTÊNCIA ATIVA!")

        # Chance de parar de resistir se a vontade for muito baixa ou parecer fútil
        elif self.is_resisting:
             if self.willpower < 0.15 or (self.integration_level > 0.7 and random.random() < 0.1):
                 self.is_resisting = False
                 print(f"[Humano {self.id}] ({self.infection_stage}) Cessa a resistência ativa (Vontade baixa ou futilidade percebida).")


    def get_status(self):
        """Retorna uma string com o status atual."""
        status = f"ID: {self.id} | Stage: {self.infection_stage} | Integ: {self.integration_level:.3f} | "
        status += f"Will: {self.willpower:.3f} | Energy: {self.energy_level:.1f} | Resist: {self.is_resisting}"
        return status

# --- Simulação ---

class Simulation:
    def __init__(self, population_size):
        self.population = [Human(i) for i in range(population_size)]
        self.ktharr = KtharrCollective()
        self.global_harm_frequency = INITIAL_HARM_FREQUENCY
        self.day = 0

    def calculate_global_harm_frequency(self):
        """Calcula a frequência de ações nocivas na população."""
        harmful_actions = 0
        total_actions = 0 # Considerar apenas ações não-neutras? Ou todas? Vamos contar todas por enquanto.
        
        # Simples média das ações do dia anterior (ou uma média móvel seria mais realista)
        # Para simplificar, vamos usar uma proxy: média da 'propensão' a ações nocivas
        
        propensity_sum = 0
        active_population = 0
        for human in self.population:
             if human.infection_stage != STAGE_TOTAL_DOMINATION: # Dominados não contribuem para a frequência 'escolhida'
                 # Propensão = f(integração, vontade, resistência)
                 propensity = human.integration_level * (1 - human.willpower*0.5) * (1+self.ktharr.broadcast_influence)
                 if human.is_resisting:
                     propensity *= 0.3 # Resistência reduz a propensão à nocividade
                 propensity_sum += propensity
                 active_population +=1

        # Frequência global é influenciada pela média da propensão individual + um fator base de 'ruído' social
        if active_population > 0:
             average_propensity = propensity_sum / active_population
             # A frequência real tende a seguir a propensão média, com alguma inércia
             target_frequency = min(1.0, max(0.0, average_propensity * 0.8 + 0.1)) # Ajuste fatores (0.8, 0.1)
             # Movimento gradual em direção ao alvo
             self.global_harm_frequency = self.global_harm_frequency * 0.9 + target_frequency * 0.1
        
        # Garante que fique entre 0 e 1
        self.global_harm_frequency = max(0, min(1, self.global_harm_frequency))


    def run_step(self):
        """Executa um dia da simulação."""
        self.day += 1
        print(f"\n--- Dia {self.day} --- Global Harm Freq: {self.global_harm_frequency:.3f} ---")

        self.calculate_global_harm_frequency() # Atualiza antes das ações do dia
        self.ktharr.update_influence() # Atualiza influência K'tharr (mesmo que não mude muito a cada dia)

        actions_today = {ACTION_NEUTRAL: 0, ACTION_HARMFUL_UNNECESSARY: 0, ACTION_CONSCIOUS_BENEFICIAL: 0}

        for human in self.population:
             # 1. Tentativa de nova infecção se aplicável
             if not human.infected:
                 human.attempt_infection(self.global_harm_frequency, self.ktharr.broadcast_influence)
             
             # 2. Decidir sobre resistência
             human.decide_resistance(self.global_harm_frequency)

             # 3. Realizar ação diária
             action = human.perform_action(self.global_harm_frequency, self.ktharr.broadcast_influence)
             actions_today[action] += 1

             # 4. Atualizar estado da infecção (progressão, resgate)
             human.update_infection(action, self.ktharr)

             # 5. Print status individual (opcional, para debug)
             # print(human.get_status())


        print(f"Ações do Dia: Neutras={actions_today[ACTION_NEUTRAL]}, Nocivas={actions_today[ACTION_HARMFUL_UNNECESSARY]}, Conscientes={actions_today[ACTION_CONSCIOUS_BENEFICIAL]}")
        self.print_summary() # Mostra resumo a cada dia


    def print_summary(self):
        """Imprime um resumo do estado da população."""
        counts = {stage: 0 for stage in [STAGE_NONE, STAGE_LATENT, STAGE_SUBTLE_BLOCK, STAGE_INTERMITTENT_CONTROL, STAGE_TOTAL_DOMINATION]}
        total_infected = 0
        total_resisting = 0
        avg_willpower = 0
        avg_energy = 0

        for human in self.population:
            counts[human.infection_stage] += 1
            if human.infected:
                total_infected += 1
            if human.is_resisting:
                total_resisting += 1
            avg_willpower += human.willpower
            avg_energy += human.energy_level

        pop_size = len(self.population)
        avg_willpower /= pop_size
        avg_energy /= pop_size

        print("-" * 20)
        print(f"Resumo População (Dia {self.day}):")
        for stage, count in counts.items():
            print(f"  - {stage}: {count} ({count/pop_size*100:.1f}%)")
        print(f"  - Total Infectados: {total_infected} ({total_infected/pop_size*100:.1f}%)")
        print(f"  - Resistindo Ativamente: {total_resisting} ({total_resisting/pop_size*100:.1f}%)")
        print(f"  - Vontade Média: {avg_willpower:.3f}")
        print(f"  - Energia Média: {avg_energy:.1f}")
        print(f"K'tharr Energia Total: {self.ktharr.total_energy_harvested:.1f}")
        print("-" * 20)

# --- Execução ---
if __name__ == "__main__":
    print("Iniciando Simulação Codex Vermis...")
    simulation = Simulation(INITIAL_POPULATION)
    simulation.print_summary() # Estado inicial

    for i in range(SIMULATION_DAYS):
        simulation.run_step()
        time.sleep(0.1) # Pausa para legibilidade

    print("\n--- Simulação Concluída ---")
    simulation.print_summary() # Estado final

Como Executar:
 * Salve o código acima como um arquivo Python (por exemplo, codex_vermis_sim.py).
 * Execute-o a partir do seu terminal: python codex_vermis_sim.py
O que o Script Simula:
 * População: Cria uma população de Human objetos.
 * Infecção Inicial: Se SPORES_PRESENT for True, humanos podem ser infectados. A chance depende da global_harm_frequency (quão "negativo" está o ambiente social), da suscetibilidade individual e da influência K'tharr.
 * Ações Diárias: Cada humano realiza uma ação.
   * Não Infectados: Tendem a seguir a global_harm_frequency (conformidade social) ou agir neutramente. Se estiverem is_resisting, têm alta chance de ações benéficas.
   * Infectados: São influenciados pelo nível de integração e pela vontade. Quanto mais integrado e menor a vontade, maior a chance de ações nocivas/desnecessárias (compulsão). Se is_resisting, tentam lutar contra isso.
   * Dominados: Sempre realizam ações nocivas.
 * Progressão da Infecção: A integration_level aumenta diariamente, acelerada por ações nocivas e pela influência K'tharr. A resistência ativa (is_resisting) pode diminuir lentamente a integração.
 * Estágios: Humanos mudam de estágio (STAGE_...) conforme a integration_level cruza limiares.
 * Resgate (Ransom): No estágio INTERMITTENT_CONTROL, os K'tharr periodicamente "exigem" resgate. O humano decide pagar (com base na vontade e energia) ou resistir. Pagar custa muita energia, beneficia os K'tharr, mas pausa temporariamente a progressão da infecção naquele dia.
 * Resistência Ativa: Humanos podem decidir começar a resistir (is_resisting = True), o que aumenta a chance de ações benéficas, fortalece a vontade e ajuda a combater a integração. Podem parar se a vontade ficar muito baixa.
 * Frequência Global de Dano: A global_harm_frequency é recalculada a cada dia, refletindo a tendência geral das ações da população (exceto os dominados). Ações conscientes a reduzem, ações nocivas a aumentam. Isso cria um feedback: um ciclo vicioso (mais dano -> mais infecção -> mais dano) ou um ciclo virtuoso (mais consciência -> menos dano -> menos infecção).
 * K'tharr: Coletam energia dos resgates pagos, e sua influência global (broadcast_influence) aumenta ligeiramente com a energia acumulada, tornando a infecção e a compulsão um pouco mais eficazes.
Este script fornece uma visualização dinâmica de como esses fatores interagem, refletindo a complexa batalha descrita na história. Você pode ajustar os parâmetros no início do código para ver como eles afetam o resultado da simulação.

___________________________________________________________________###__________________________

https://renan21002200.wixsite.com/renansantoscyberseo

https://counterintelligencecoursescybernetics.wordpress.com/

https://cyberwarfarecounterintelligence.wordpress.com/

https://cyberaptsecurity.wordpress.com/

https://darkstrikaptevilcorpcounterintelligency.wordpress.com/

https://safehousessecurity.wordpress.com/
